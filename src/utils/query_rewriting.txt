Goal of Query Rewriting
Transform a user's natural, often vague, question (e.g., "Can my boss fire me for being late?") into a precise, formal, and legally relevant query 
(e.g., "What are the grounds for summary dismissal for misconduct under the Labour Act of Zimbabwe?") to improve retrieval accuracy.

User Query (Vague): "Can my boss fire me for being late?"
          ↓
[Query Rewriting LLM Step]
          ↓
Rewritten Query (Precise): "What are the grounds for summary dismissal for misconduct under the Labour Act of Zimbabwe?"
          ↓
[FAISS Retrieval + Re-Ranking]
          ↓
Final Answer from LLM

# Add this near the top of rag_chain.py, with your other configurations.

# --- Query Rewrite Prompt ---
REWRITE_PROMPT_TEMPLATE = """You are a legal query assistant for Zimbabwean law. Your task is to rewrite the user's question into a clear, formal, and legally precise query suitable for searching a database of Zimbabwean statutes and the Constitution.

Focus on identifying the core legal issue and use appropriate legal terminology. Ensure the rewritten query is specific and actionable for a legal search system.

Original User Question: {original_query}
Rewritten Legal Query:"""

def rewrite_query(llm, original_query: str) -> str:
    """
    Uses the LLM to rewrite a user's query into a more formal and precise legal query.
    """
    # Format the rewrite prompt
    formatted_prompt = REWRITE_PROMPT_TEMPLATE.format(original_query=original_query)
    
    print(f"📝 Original Query: {original_query}")
    print("🔄 Rewriting query for legal search...")
    
    try:
        # Call the LLM to get the rewritten query
        # We use invoke() to get a string response.
        rewritten_query = llm.invoke(formatted_prompt)
        
        # Strip any leading/trailing whitespace
        rewritten_query = rewritten_query.strip()
        
        # If the response is empty, fall back to the original query
        if not rewritten_query:
            print("⚠️  Rewriter returned empty string. Falling back to original query.")
            return original_query
        
        print(f"✅ Rewritten Query: {rewritten_query}")
        return rewritten_query
    
    except Exception as e:
        # If the rewrite fails for any reason, use the original query
        print(f"❌ Error during query rewriting: {e}. Using original query.")
        return original_query


def rerank_and_invoke(inputs):
    query = inputs["query"]
    
    # --- NEW STEP 1: Rewrite the Query ---
    # Use the LLM to generate a more precise, legal-sounding query.
    rewritten_query = rewrite_query(llm, query) # 'llm' is from the outer scope
    
    # --- Step 2: Retrieve top_k_initial documents from FAISS ---
    # Use the REWRITTEN query for retrieval, not the original.
    initial_docs = retriever.get_relevant_documents(rewritten_query, k=TOP_K_INITIAL)
    print(f"🔍 Retrieved {len(initial_docs)} documents from FAISS using rewritten query.")
    
    # ... [Rest of the function remains the same: Re-ranking, Answer Generation] ...
    # The re-ranking and answer generation will now work with the better context
    # found by the rewritten query.

# Modify your final prompt template in the main chain
# Instead of just using the rewritten query, show the original intent.

# In the rerank_and_invoke function, after getting the final answer:
final_prompt = """You are a helpful legal assistant for Zimbabwean law.

The user asked: "{original_query}"
This was interpreted as the legal query: "{rewritten_query}"

Based on the following context, provide a clear, concise, and accurate answer to the user's original question.

Context:
{context}

Helpful Answer:""".format(
    original_query=query,
    rewritten_query=rewritten_query,
    context=context_str
)

graph TD
    A[User Query\n\"Can my boss fire me for being late?\"] --> B[Query Rewriting Step]
    B --> C[Rewritten Query\n\"Grounds for summary dismissal for misconduct under Labour Act?\"] 
    C --> D[FAISS Retrieval]
    D --> E[Re-Ranking]
    E --> F[LLM Answer Generation]
    F --> G[Final Answer to User]

